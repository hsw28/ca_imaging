STEPS


1. Simulate Two Environments (EnvA and EnvB):
    Modify the RatInABox model to simulate two different environments (EnvA and EnvB).
    You can create two different Environment objects with distinct features or layouts to represent these environments.
    •	envA_rectangle.py
          - Environment A (EnvA): This is a rectangular environment with dimensions 31 inches x 20 inches. The code for EnvA includes the setup for this environment and the calculation of place cell firing rates based on the agent's position.
    •	envB_oval.py
          - Environment B (EnvB): This is an oval-shaped environment with dimensions 18 inches x 26 inches. The code for EnvB includes a custom movement function to simulate the oval shape with a tolerance for the agent rearing up slightly beyond the confines of the oval. It also includes the calculation of place cell firing rates based on the agent's trajectory.
    -- remember to change the environment from pixels to m:
        - rectangle is .7874m x .508m
            - multiply x dimensions by 0.0019, subtract minimum
            - multiply y dimensions by 0.0015, subtract minimum
        - oval is 0.6604m x  0.4572
            - multiply x dimensions by 0.0014, subtract minimum
            - multiply y dimensions by 0.0015, subtract minimum


2. Simulate Task-Specific Learning (tEBC)
    •	tebc_response.py
          - defines 8 classes of tebc neurons based on the paper "Sequence of Single Neuron Changes in CA1 Hippocampus of Rabbits During Acquisition of Trace Eyeblink Conditioned Responses"
    •	CombinedPlaceTebcNeurons.py
          - class that combines tEBC and place cell data into one cell type
          - adjust the BALANCE PARAMETER to adjust how much each cell incorporates spatial vs tEBC data
          - adjust tebc_responsive_rate that specifies the percentage of neurons that are responsive to tEBC signals.
    •	trial_marker.py
          - Function to Determine CS/US Presentation ()

3. Simulate Task-Specific Learning (tEBC) in EnvA
    - the loop to do this is in envA_rectangle.py

4. Transfer Learning to EnvB
    - Since the rat has already learned the tEBC task in EnvA, you should use the same CombinedPlaceTebcNeurons class in EnvB. This ensures that the neuronal responses to the CS and US are consistent with the learning that occurred in EnvA.
    - Simulate Neuronal Activity in EnvB: Run a simulation in EnvB using the trajectory data for this environment. observe how the neurons, which have specific firing patterns associated with the CS and US from EnvA, behave in the new spatial layout of EnvB.

5. Simulate in Both Environments with Varying Balances
    Run simulations in both EnvA and EnvB, varying the balance parameter across different runs. This will allow you to see how different levels of emphasis on tEBC learning versus spatial coding affect the neuronal activity in each environment.

6. Analyze the Results
    After each simulation run, analyze the results to assess:
     - Learning Transfer: How well does the tEBC learning transfer to EnvB with different balance levels?
     • learningTransfer.py
        - comparing the neuronal responses to the conditioned stimuli (CS) and unconditioned stimuli (US) in both environments and quantifying the similarity or consistency of these responses.
     • (will also want to run through CEBRA and see decoding accuracy)

     - Spatial Coding Accuracy: How accurately do the neurons represent space in each environment under different balance settings?
     • actualVexpected.py
          - Comparing Expected vs. Actual place cell Firing Rates
     • (will also want to run through CEBRA and see decoding accuracy / do bayesian decoding)

     - Optimal Balance: Determine which balance setting provides the best compromise between effective learning transfer and accurate spatial representation.

7. Iterate and Refine
    Based on findings, iterate and refine the balance parameter or  the model
